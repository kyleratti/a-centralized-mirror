name: "Publish Release"

on:
  workflow_dispatch

# Allow one run of this workflow per branch and cancel existing runs if triggered again
concurrency:
  group: acm-publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{ steps.release_export.outputs.TAG_NAME }}
      FILE_NAME: ${{ steps.release_export.outputs.FILE_NAME }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0' # Load entire history
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
      - run: dotnet restore
      - run: dotnet build --no-restore -c Release
      - run: dotnet publish -c Release --no-restore --output=dist
      - run: dotnet tool restore
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          dotnet tool run versionize
          echo "RELEASE_VERSION_NUMBER=$(dotnet tool run versionize inspect)" >> $GITHUB_ENV
          git push --follow-tags
          git fetch --tags origin
      - run: tar -czvf "a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz" dist
      - run: gh release create "v${{ env.RELEASE_VERSION_NUMBER }}" --notes-file CHANGELOG.md "a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz"
        env:
          GH_TOKEN: ${{ github.token }}
      - id: release_export
        run: |
          echo "TAG_NAME=v${{ env.RELEASE_VERSION_NUMBER }}" >> $GITHUB_OUTPUT
          echo "FILE_NAME=a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz" >> $GITHUB_OUTPUT
  deploy:
    name: "Deploy"
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: kyleratti/actions/.github/actions/deploy-container@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          project_id: "a-centralized-mirror"
          release_tag: ${{ needs.release.outputs.TAG_NAME }}
          ssh_deploy_host: ${{ secrets.SSH_DEPLOY_HOST }}
          ssh_deploy_port: ${{ secrets.SSH_DEPLOY_PORT }}
          ssh_deploy_user: ${{ secrets.SSH_DEPLOY_USER }}
          ssh_deploy_key: ${{ secrets.SSH_DEPLOY_KEY }}
          docker_compose_file: ${{ vars.DOCKER_COMPOSE_FILE }}
          docker_file: WebApi/Dockerfile
