name: "Publish Release"

on:
  workflow_dispatch

# Allow one run of this workflow per branch and cancel existing runs if triggered again
concurrency:
  group: acm-publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{ steps.release_export.outputs.TAG_NAME }}
      FILE_NAME: ${{ steps.release_export.outputs.FILE_NAME }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0' # Load entire history
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'
      - run: dotnet restore
      - run: dotnet build --no-restore -c Release
      - run: dotnet publish -c Release --no-restore --output=dist
      - run: dotnet tool restore
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          dotnet tool run versionize
          echo "RELEASE_VERSION_NUMBER=$(dotnet tool run versionize inspect)" >> $GITHUB_ENV
          git push --follow-tags
          git fetch --tags origin
      - run: tar -czvf "a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz" dist
      - run: gh release create "v${{ env.RELEASE_VERSION_NUMBER }}" --notes-file CHANGELOG.md "a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz"
        env:
          GH_TOKEN: ${{ github.token }}
      - id: release_export
        run: |
          echo "TAG_NAME=v${{ env.RELEASE_VERSION_NUMBER }}" >> $GITHUB_OUTPUT
          echo "FILE_NAME=a-centralized-mirror-v${{ env.RELEASE_VERSION_NUMBER }}.tar.gz" >> $GITHUB_OUTPUT
  deploy:
    needs: release
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: gh release download ${{ needs.release.outputs.TAG_NAME }} --pattern "${{ needs.release.outputs.FILE_NAME }}"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Clean server build dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          script: mkdir -p /tmp/acm/${{ github.sha }}
      - name: Copy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          source: "./${{ needs.release.outputs.FILE_NAME }}"
          target: "/tmp/acm/${{ github.sha }}/${{ needs.release.outputs.TAG_NAME }}"
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          debug: false
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          # NOTE: If you don't _also_ export the variable in the script, docker won't be able to see it!
          script_stop: true
          script: |
            cd /tmp/acm/${{ github.sha }}/${{ needs.release.outputs.TAG_NAME }}
            tar -xzf "${{ needs.release.outputs.FILE_NAME }}"
            rm "${{ needs.release.outputs.FILE_NAME }}"

            mkdir -p "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}"
            cp -r ./dist/. "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}"

            ln -s "${{ secrets.DEPLOY_APPSETTINGS_PATH }}" "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME }}/"

            sudo systemctl stop a-centralized-mirror.service
            rm "${{ secrets.DEPLOY_DIRECTORY }}/latest" || true
            ln -s "${{ secrets.DEPLOY_DIRECTORY }}/${{ needs.release.outputs.TAG_NAME}}/" "${{ secrets.DEPLOY_DIRECTORY }}/latest"
            sudo systemctl start a-centralized-mirror.service
